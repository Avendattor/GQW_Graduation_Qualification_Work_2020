ВВЕДЕНИЕ
В современном доме ни одна комната не обходится без устройства, подключенного к сети Internet. Разнообразие этих устройств велико: от систем домашней автоматизации быта до промышленного сетевого оборудования. Данные устройства были созданы ради обеспечения пользователям комфорта, безопасности и надёжности.
Однако не всё так просто. Для полноценного и бесперебойного функционирования систем связанных между собой устройств требуется не только грамотная первоначальная настройка каждого узла, но и периодическая диагностика сети.
Также в наши дни огромную долю рынка занимают услуги, обходя по популярности товары. И обусловлено это тем, что каждой купленной единице техники необходима поддержка, и если компания-изготовитель не предоставляет необходимые покупателю услуги, клиент вынужден искать на рынке провайдера требуемых услуг.
Именно поэтому задача предоставления клиенту не только качественного оборудования, но и достойного уровня оказываемых услуг является первоочерёдной для компаний-изготовителей всевозможного электронного оборудования - будь то гарантия на новый смартфон, подписка на платное ПО на новом ноутбуке, или же расширенная страховка на автомобиль.
Сфера рынка, затрагивающая отрасль различного сетевого оборудования, так же подчиняется законам мирового рынка, как и любая другая сфера. В данной работе будет поддаваться анализу именно сфера сетевых технологий оборудования и программного обеспечения, предоставляемых на данный момент ведущими мировыми лидерами.
 
1	Постановка задачи
1.1	Описание предметной области
В настоящее время каждый интернет-провайдер имеет возможность мониторинга линии связи до конечного устройства клиента. Другими словами, если клиент обратится с проблемой отсутствия интернета, оператор может дистанционно проверить, на каком именно участке линии произошёл обрыв, и только после этого отправить мастера на устранение проблемы.
В процессе совершенствования компании и борьбы за место на рынке, когда обеспечения качества сервиса до оборудования клиента уже недостаточно, провайдер ищет решение, которое позволило бы ему проверять состояние не только собственного оборудования доступа, но и оборудования, установленного у клиента. Ведь, по большому счету, не важно, в каком месте линии до ноутбука или телефона абонента проблема – важно есть ли у него Интернет, а если нет – провайдеру нужно как можно раньше узнать об этом и как можно быстрее решить вопрос.
В целях минимизации затрат на выезд мастеров к клиентам и оптимизации решения проблем прогрессивные компании находятся в поисках решений, позволяющих проводить диагностику локальных сетей дистанционно, и одним из этих решений является SLA-агент.
SLA-агент – механизм диагностики состояния сети на стороне конечного пользователя. Его задача заключается в периодической отправке статистических данных, собранных устройством с системных счетчиков, а также результатов проверки доступности заранее заданных узлов утилитами Ping и Traceroute.
После внедрения в сеть провайдера подобной системы компания получает инструмент, позволяющий удаленно и быстро решать различные проблемы, возникающие на роутерах пользователей. Например, теперь при обращении в техническую поддержку, оператор может незамедлительно получить информацию о состоянии роутера клиента, загруженности частотного диапазона Wi-Fi, проблемах с кабелем, соединяющим роутер и ПК клиента. По статистике, очень много жалоб абонентов, оказывается, не вызваны проблемами в сети, а связаны с домашними условиями – или медленная скорость по Wi-Fi из-за совпадения частот с соседями, или роутер неправильно настроен, или неправильно обжат кабель.
Без системы мониторинга SLA в роутерах провайдер может провести только диагностику "последней мили" клиента, проверить целостность кабеля от своего оборудования доступа до CPE (роутера клиента) и оборудование своей сети. С внедрением агента зона возможностей расширяется и на роутер клиента. Больше нет необходимости высылать специалиста к клиенту домой для проверки работоспособности роутера и поиска причин возникновения проблем. Можно провести диагностику удаленно и сразу же, при обращении клиента, после чего выдать рекомендации по устранению или произвести ремонт мастером.
Благодаря подробной статистике провайдер может установить наличие проблем с ПК, ноутбуком или мобильными устройствами клиента. Например, по аномально завышенным показателям счетчикам broadcast или multicast кадров оператор может предположить, что на ПК клиента есть вирусы и порекомендовать ему провести проверку.
Собранные системой данные могут быть представлены за определенные временные отрезки, что позволяет проанализировать их и увидеть глобальные проблемы с сервисами, причиной которых могут стать как неверная конфигурация сети провайдера, так и нововведения или изменения в сети.
Более того, интернет-провайдер способен увидеть проблему и решить её до того, как с ней столкнутся его пользователи и обратятся в техническую поддержку.
Подводя итоги краткого описания преимуществ мониторинга и опираясь на статистику некоторых компаний, можно отметить, что система SLA на самом деле является удобной, позволяет сэкономить ресурсы и улучшить качество сервисов, предоставляемых сетевыми провайдерами.
1.2	Определение этапов разработки
Перед началом работы необходимо обозначить основные этапы разработки программного обеспечения:
1.	Системный анализ предметной области. Достаточно глубокий анализ области применения программного средства позволит заранее сформировать требования к разрабатываемой программной среде, опираясь на недостатки и преимущества конкурентов на мировом рынке.
2.	Определение назначения разрабатываемого программного обеспечения. Формирование списка предполагаемых пользователей и определение основных функциональных особенностей позволит наиболее точно составить требования к графическому интерфейсу.
3.	Выбор средств для разработки. Стек web разработчика – важный набор инструментов, средств и утилит, от комбинации и степени освоения которых зависит качество разработанного ПО.
4.	Проектирование пользовательского интерфейса. Первый шаг на пути к созданию пользовательского интерфейса – создание его графического прототипа с поведением, а также дерева форм. Это позволяет избежать неоднозначных разногласий в дальнейших этапах разработки.
5.	Организация взаимодействия пользовательского интерфейса с сервером (front end и back end). «Нарисованному» пользовательскому интерфейсу необходимо добавить поведение с помощью языков программирования и реализовать связь пользователя с сервером.
6.	Разработка пользовательского интерфейса. Необходимо отобразить спроектированный web интерфейс средствами выбранного стека технологий в web-браузере.
7.	Разработка программной документации. Этот этап подразумевает разработку двух видов документации: руководства системного программиста и руководства пользователя.
8.	Тестирование программного обеспечения. На данном этапе производится тестирование программы с целью проверки корректности её работы с ввода разного вида данных, а также корректных получения, обработки и отображения необходимых данных с сервера.
 
2	Технико-экономическое обоснование темы
2.1	Описание проблемы
Рассмотрим пример с обычным среднестатистическим пользователем домашнего интернета и провайдером. При первом подключении клиента к сети провайдера мастер производит первоначальную настройку и, удостоверившись в работоспособности домашней сети и наличии стабильного соединения с глобальной сетью, покидает клиента, завершая свою работу. Первоначальная настройка выполнена, но в случае внезапного обрыва соединения с сетью клиент будет вынужден снова вызывать мастера для диагностики и устранения неполадок. В данной ситуации возникает вопрос о возможности дистанционной диагностики, так как если проблема на стороне клиента не является серьёзной, отправлять мастера к клиенту становится нецелесообразно по ряду причин.
Проблема дистанционной диагностики состояния локальных сетей в настоящее время становится всё более актуальной благодаря положительному росту как и количества сетевых узлов, так и конечных пользователей.
2.2	Назначение разрабатываемого ПО
Главное назначение данного программного обеспечения – улучшение качества сервиса обслуживания, а именно: 
	максимальное сокращение времени между обращением клиента в техподдержку и решением проблемы;
	минимизация затрат всевозможных ресурсов на поиск необходимой информации на сервере.
В первую очередь разрабатываемое программное обеспечение предназначено для использования лицами, чья профессиональная деятельность включает в себя сетевой мониторинг. Этими лицами могут быть:
	системные администраторы;
	специалисты по сетевому мониторингу;
	иные лица, ответственные за работу сети в организации;
	пользователи, которым предоставлен доступ к мониторингу сети.
2.3	Характеристика основных функций и задач разрабатываемого ПО
Так как web-интерфейс предназначен для взаимодействия пользователя и сервера, ПО должно способствовать быстрому поиску необходимой информации на сервере и корректному отображению на экране пользователя, а именно двум основным аспектам:
	обработке и отправке введённых пользователем данных на сервер;
	обработке и отображению полученных с сервера данных.
Разрабатываемое программное обеспечение должно работать с такой информацией, как:
	техническая информация об устройствах, находящихся в системе;
	общее количество устройств в системе, их вид и параметры;
	отчёты о техническом состоянии обозреваемых устройств в разрезе времени;
	информация о пользователе, данные для его идентификации и авторизации.
2.4	Обзор существующих программных средств
На данный момент существует два варианта получения доступа к SLA администрированию: программные агенты могут быть встроены в сетевое оборудование заводом-изготовителем или приобретаться и устанавливаться отдельно.
Cisco IP SLA Monitor.
Cisco Systems в течение многих лет остается безоговорочным лидером в сегменте сетевого оборудования. Опрос показал, что пользователи отметили качество ее продукции, сервисного обслуживания клиентов и техподдержки партнеров.
Программный агент IP SLA (рисунок 2.1), встроенный в Cisco IOS маршрутизаторов Cisco Systems дает возможность измерять качество IP соединения в привязке к работе бизнес-критичных приложений, таких как VoIP, видеоконференцсвязь и критичные к задержкам данные. Cisco IP SLA Monitor (Service Assurance Agent) использует активный метод контроля. Генерируя тестовый трафик IP SLA Monitor обеспечивает измерение показателей производительности и качества сети. Маршрутизатор на одной стороне канала генерирует трафик с заданными параметрами, на второй стороне канала маршрутизатор выступает в роли ответчика.
Данное программное решение от компании Cisco обладает массой преимуществ, расширенной документацией на разных языках и оперативной поддержкой. Минус у данного решения один – высокая цена продукции. 
Cisco занимает лидирующую позицию на мировом рынке и ведёт беспрестанную борьбу за удержание своего места среди конкурентов. Другими словами, за качество и грамотную поддержку интернационального масштаба приходится сильно переплачивать.
 
Рисунок 2.1 – Пользовательский интерфейс Cisco IP SPA Sensor
D-Link SLA-system.
Эффективное сетевое управление в оборудованиях D-Link представлено как и встроенными системами программных средств, так и приобретаемыми опционально. При необходимости интернет-провайдеры могут заказать кастомизацию приобретаемых роутеров, в том числе размещение логотипа на корпусе устройства, индивидуальный дизайн упаковки, разработку встроенного ПО с учетом специфических требований заказчика или добавление необходимого функционала (например, SLA-агента для мониторинга работоспособности клиентских сетей). Подробная информация о программе кастомизации размещена на официальном сайте компании.
Для выполнения Соглашения об уровне качества обслуживания SLA (Service Level Agreement), провайдерам необходимо стремиться к сокращению среднего времени восстановления работоспособности устройства (Mean Time to Repair - MTTR) и повышению доступности услуг. Функционал Ethernet OAM способствует решению этих проблем и позволяет провайдерам обеспечить наилучшее качество предоставляемых услуг. Коммутаторы передовых серий этой компании поддерживают стандартизированные функции OAM, включая IEEE 802.3ah, IEEE802.1ag и ITU-T Y.1731. Connectivity Fault Management (CFM) предоставляет функции наблюдения, поиска и устранения неисправностей в сетях Ethernet, позволяя контролировать соединение, изолировать проблемные участки сети и идентифицировать клиентов, к которым применялись ограничения в сети.
Компания D-Link является ведущим мировым производителем сетевого оборудования, предлагающим широкий набор решений для создания локальных сетей, построения беспроводных сетей и организации широкополосного доступа, передачи изображений и голоса по IP (VoIP). В 2012 году компания открыла в Российской Федерации собственное производство, сертифицированное в соответствии с требованиями ГОСТ. В Российской Федерации во многих городах открыты офисы компании и учебные центры D-Link.
Так как компания занимает лидирующие позиции в производстве сетевого оборудования именно потребительского класса и устройств для «умного дома», ценовая политика характеризуется средним значением цен на рынке. Среднестатистический пользователь желает получить продукт надлежащего качества по приемлемой цене и не имеет завышенных требований. Поэтому целевым потребителем данной компании по большей части является обычный рядовой пользователь домашнего интернета, который не имеет желания переплачивать за сверхвысокое качество и излишнюю надёжность.
Существующий SLA-агент от компании D-Link соответствует всем современным техническим требованиям, но разработан с использованием устаревших фреймворков и библиотек (стека технологий). 
Пример одной из версий пользовательского интерфейса представлен на рисунке 2.2:
 
Рисунок 2.2 – Пример пользовательского интерфейса системы мониторинга D-Link SLA-system
PRTG Network Monitor.
PRTG – программное решение от компании Paessler AG, приобретаемое отдельно, оно не поставляется вместе с оборудованием и может быть интегрировано практически в любые системы.
PRTG проводит мониторинг выбранной IT инфраструктуры безостановочно и оповещает оператора о проблемах ещё до того, как пользователь с ними столкнётся.
Программный интерфейс представлен на рисунке 2.3 и рисунке 2.4
 
Рисунок 2.3 – Визуальный интерфейс PRTG Network Monitor
 
Рисунок 2.4 – Просмотр дерева групп в PRTG Network Monitor
Данное программное решение не отличается в техническом плане от своих аналогов, однако имеет гибкую систему подстройки под нужды заказчика. Цена приобретаемого решения зависит от конкретных требований заказчика, что позволяет снизить затраты на покупку продукта при малых масштабах сети компании, которую необходимо диагностировать удалённо. Также отличительной особенностью этой системы является отсутствие полноценной поддержки на Русском языке.
На рисунке 2.5 представлен прайс на услуги компании Paessler AG, который прямо пропорционален количеству сенсоров в системе мониторинга:
 
Рисунок 2.5 – Цены на услуги компании Paessler AG
Подводя итоги касательно PRTG Network Monitor, можно сказать, что описываемая компания имеет внушительный опыт в данной сфере и умеет подстраиваться под нужды клиента. Пользовательский интерфейс аналогично соответствует всем требованиям, но решающим фактором при выборе системы SLA-мониторинга для компании не столь крупных масштабов будет являться цена приобретаемого продукта. В целях экономии материальных ресурсов и времени заказчику выгоднее будет купить оборудование с предустановленными системами мониторинга, чем покупать отдельно. Именно поэтому данное решение имеет два существенных недостатка: цена покупки и необходимость дополнительной установки на купленное стороннее оборудование.
SLAMON Online.
Компания SLAMON основана в России и предоставляет услуги мониторинга сетей в формате подписки с помесячной оплатой. Функционал системы соответствует высшим требованиям, так как SLAMON основан на платформе, включенной в Единый реестр средств измерений Белоруссии и России.
Предоставляемые компанией услуги и заявленные преимущества:
•	мониторинг доступа в Интернет;
•	мониторинг качества IP-телефонии;
•	мониторинг доступности сайта;
•	мониторинг корпоративных систем;
•	контроль загрузки канала;
•	приоритизация трафика;
•	отчеты SLA;
•	мобильное приложение;
•	интеграция с сетевым оборудованием;
•	интеграция с Service Desk;
•	высочайшая точность измерений.
Данная компания специализируется на предоставлении своих услуг в формате подписки с помесячной оплатой за каждый установленный аппаратный и программный агент. Выбранное решение довольно специфично и подойдёт не для каждой компании. Главная особенность, которую нужно учитывать – с ростом офисов и масштабов сети компании придётся увеличивать месячную плату за предоставляемые услуги.
Спектр услуг, предоставляемый SLAMON Online, зависит от типа пакета оформленной подписки. Для получения доступа ко всем перечисленным выше услугам необходимо оплатить самый дорогой пакет.
Цены на услуги компании представлены на рисунке 2.6:
 
Рисунок 2.6 – Стоимость услуг компании SLAMON
Для работы SLAMON необходимо установить агент в точке, из которой будет осуществляться мониторинг качества сервисов. Агенты бывают программные и аппаратные. Можно сделать вывод, что данное решение применимо в компаниях малого масштаба с отсутствующими предустановленными заводом-изготовителем агентами в аппаратных узлах сети. Если же сеть, мониторинг которой необходимо производить, значительно расширяется, плата за подписку на услуги сервиса уверенно возрастает. Данное средство имеет смысл внедрять исключительно в компании небольшого масштаба, руководители которых желают получить полный спектр услуг по настройке и поддержке мониторинга, при этом не вдаваясь в подробности реализации.
 
3	Теоретическая часть
В связи с тем, что вышеописанные аналоги обладают рядом перечисленных недостатков, тема данной ВКР является актуальной.
Так как технический прогресс не стоит на месте, пользователь изъявляет желание получать обновления полученного продукта и при этом не переплачивать за ненужные ему дополнительные функции и возможности в приобретённом им товаре.
Для пользователей сети Internet куда важнее получать обновления не только функционала программной продукции, но и визуального интерфейса.
Исходя из вышесказанного, можно сделать вывод, что перечисленные системы SLA-мониторинга не имеют недостатков в техническом плане, дело лишь в цене приобретаемого продукта, usability и информативности пользовательского интерфейса программного решения. Поэтому в качестве предлагаемого средства в рамках данной ВКР решено было представить собственную версию WEB-интерфейса SLA-мониторинга, работающую в связке с тестовым SLA-сервером, предоставленным компанией D-Link. Предлагаемая новая улучшенная версия графического интерфейса будет сочетать в себе преимущества всех перечисленных аналогов. Также новое программное решение будет разрабатываться с целью устранения недостатков, выявленных при анализе конкурентов на мировом рынке.
Произвести интеграцию разрабатываемого программного решения предлагается следующим образом. Программный продукт должен быть предустановлен на реализуемом компанией оборудовании перед продажей. Осуществление запуска и настройки системы SLA-мониторинга может производиться как и мастерами компании-изготовителя, так и средствами покупателя. Другими словами, программное оснащение должно иметь внятную и подробную документацию, а пользовательский интерфейс должен быть интуитивно понятным для целевого пользователя.
3.1	Системный анализ предметной области
Рассмотрим пример. При приобретении аппаратного обеспечения для организации малых масштабов или систем умного дома заказчик может не задаваться вопросом касательно внедрения системы дистанционного мониторинга в свою сеть. В дальнейшем, при вынужденном расширении внутренней сети предприятия, или системы умного дома, появится вопрос о необходимости SLA-мониторинга. В ситуации, при которой SLA-агенты были предустановлены на оборудовании заводом-изготовителем, клиенту нет нужды искать сторонних поставщиков требуемого решения, так как все необходимые программные средства уже имеются в каждом узле настроенной внутренней сети – остаётся лишь произвести активацию и настройку SLA-мониторинга.
Именно поэтому покупка аппаратного обеспечения для собственной сети с предустановленными системами SLA-мониторинга является вкладом заказчика в успешное будущее его компании, а разработка и поддержка WEB-интерфейса для этих систем – актуальной задачей в условиях современного мира. Далее будет рассмотрено более детально, в чём заключается суть данного вида сетевого мониторинга.
SLA-агент – механизм диагностики состояния сети на стороне конечного пользователя. Его задача заключается в периодической отправке статистических данных, собранных устройством с системных счетчиков, а также результатов проверки доступности заранее заданных узлов различными утилитами.
Другими словами, задача программного агента на каждом узле – периодическая отправка данных на сервер, а задача сервера – отправка обработанных данных пользователю по запросу последнего, которым может являться, например, системный администратор.
Нам предстоит организация взаимодействия с сервером, а значит, нужно разделить весь объём работы на два фронта – front end и back end. Выполнение данной ВКР подразумевает получение существующих на сервере данных помощью web-интерфейса. Разрабатываемое ПО должно отвечать за корректный поиск уже существующих статистических данных на тестовом сервере с указанными пользователем параметрами – другими словами, связывать пользователя и сервер (рисунок 3.1):
 
Рисунок 3.1 – Диаграмма фронтов разработки
В рамках данной ВКР взаимодействие с сервером будет выполняться по HTTP API, то есть, работа с сервером происходит в режиме чёрного ящика: разработчику frontend совершенно не обязательно знать внутреннее устройство сервера. Работа по API – это получение ожидаемых данных определённого типа в ответ на отправленные данные определённого типа, естественно, в формате JSON.
Подводя итоги тщательного анализа узкой предметной области, разрабатываемый web интерфейс должен обрабатывать, а затем отправлять введённые пользователем данные, затем получать ответ сервера, обрабатывать и отображать полученные данные.
3.2	Выбор средств разработки и языков программирования
Так как рассматриваемый существующий на данный момент Web-интерфейс SLA-сервера от компании D-Link разработан на фреймворке AngularJS, который, как известно, устарел и имеет ряд серьезных недостатков, выбор средств для разработки необходимо совершать исходя из разнообразия подходящих современных решений. Далее будет описан выбранный современный стек технологий web-разработчика.
В качестве инструмента для формирования, отправки и тестирования HTTP-запросов было приято решение использовать утилиту Postman. Преимущества данного программного решения:
•	ПО поставляется бесплатно;
•	интуитивно понятный пользовательский интерфейс;
•	наличие встроенных гайдов по использованию;
•	широкий спектр предоставляемых возможностей;
•	гибкая настройка рабочего пространства;
•	множество положительных отзывов;
•	бесперебойная работа;
•	минимальные требования к ресурсам ПК.
Данный продукт используются не только тестировщиками, занимающимися API в ключе автоматизации и тестирования. Утилита так же предоставляет интерес для разработчиков в плане написания и выявления ошибок в API. То есть, инструмент представляет собой полноценную IDE с возможностью тестирования API.
Доступно три версии ПО: 
•	Postman - бесплатно; 
•	Postman Pro - $8 в месяц;
•	Postman Enterprise - $21 в месяц.
В рамках данной разработки будет достаточно набора возможностей, предоставляемых бесплатной версией.
Пользовательский интерфейс утилиты Postman представлен на рисунке 3.2:
 
Рисунок 3.2 – Пользовательский интерфейс инструмента Postman
Так как цель разработки – создание именно WEB-интерфейса, необходим WEB-браузер для отладки и тестирования продукта. Очевидно, что для полноценного тестирования необходимо проверить полученное программное решение во всех существующих браузерах, чтобы исключить возможные несоответствия в отображении элементов с разных платформ и устройств. Но вести разработку и отладку сразу с нескольких браузеров в рамках данной работы не является целесообразным.
В качестве основного интернет-браузера был выбран Google Chrome, так как большинство пользователей пользуются именно им. Опираясь на статистику, в Декабре 2019 года 66.64% запросов c персональных компьютеров к WEB-сервисам осуществлялось с помощью Chrome, а с мобильных устройств - 62.08%.
Главной и отличительной особенностью браузера от Google на данный момент является наличие собственного магазина расширений, его название – Chrome Web Store. В маркете присутствует множество утилит для помощи разработчику и автоматизации в создании, отладки и тестировании программных продуктов.
Стоит упомянуть и встроенный инструмент разработчика под названием Chrome DevTools, который позволяет редактировать страницы «на лету» и быстро диагностировать проблемы, и эта помощь является незаменимой для ускорения разработки сайтов и сервисов, улучшения их качества. Основные функции, предоставляемые данным набором инструментов:
•	просмотр и изменение DOM - объектной модели документа;
•	просмотр и изменение CSS текущих страниц;
•	отладка JavaScript;
•	просмотр сообщений и запуск JavaScript в консоли;
•	оптимизация скорости WEB-сайта;
•	исследование активности сети.
Функция просмотра контента Device Mode, которая позволяет увидеть разрабатываемую страницу такой, какой она будет отображаться на других устройствах. Есть возможность настроить разрешение, DPI, коэффициент соотношения пикселей, масштаб, устанавливаемый по умолчанию мобильным браузером и прочие параметры просмотра контента.
В качестве среды разработки был выбран редактор кода Microsoft Visual Code в наборе с множеством расширений, которые в свою очередь превращают текстовый редактор в полноценную IDE. Преимущества установленных расширений, а также самого VS Code:
	поддержка Angular;
	отладчик;
	поддержка утилит для удобного тестирования;
	система подсветки синтаксиса и помощи в написании кода;
	гибкая система настроек;
	интеграция с системами контроля версий.
В качестве фреймворка для разработки клиентской части был выбран Angular. Angular позволяет создавать так называемые «Одностраничные приложения» или SPA (веб-приложения или веб-сайты, использующие единственный HTML-документ как оболочку для всех веб-страниц и организующие взаимодействие с пользователем через динамически подгружаемые HTML, CSS и JavaScript). Преимущества Angular:
	инструменты разработчика (CLI);
	единая структура проекта;
	поддержка TypeScript; 
	dependency injection; 
	шаблоны, основанные на расширении HTML; 
	кроссбраузерная поддержка HTTP, WebSockets, Service Workers; 
	динамический роутинг; 
	material design - библиотека компонентов пользовательского интерфейса. 
Одним из основных минусов Angular является высоких порог вхождения из-за Observable (RxJS) и Dependency Injection.
В качестве UI библиотеки была выбрана библиотека Angular Material [8].
Разрабатываемому WEB-интерфейсу требуется среда JavaScript runtime, в качестве которой была выбрана Node.js.
В качестве ПО для проектирования пользовательского интерфейса, создания прототипов, концептов, макетов, графических эскизов и прочего был выбран инструмент Adobe XD - удобное векторное средство для дизайна взаимодействия с пользователем.
В данном разделе были выбраны и описаны средства разработки и языки программирования, выделены их ключевые особенности.
 
4	Проектная часть
4.1	Проектирование пользовательского интерфейса
4.1.1	Разработка дерева форм
В процессе изучения аналогов в плане выявления их недостатков и преимуществ, а также тщательного анализа предметной области спроектировано дерево форм, которое будет являться основным логическим каркасом для проектирования и создания пользовательского интерфейса и поведения пользователя, или, если использовать общепринятые термины – UX/UI. Спроектированное дерево форм представлено на рисунке 4.1.
 
Рисунок 4.1 – Дерево форм
Авторизация – маленькая формочка с полями ввода логина, пароля и кнопкой входа.
Страница поиска устройств – набор панелей расширений с функциями поиска, его настройки, вывода результатов, а также с панелью инструментов, на которой находится кнопка переключения между двумя основными режимами работы ПО – поиском отчётов и поиском устройств. Также на этой странице имеется панель с краткой сводкой основной информации.
Панель поиска имеет два поля для ввода IP и MAC адреса, а также две кнопки для поиска по IP и поиска по MAC.
Панель фильтров поиска позволяет указать требуемые параметры для поиска по IP или по MAC – такие как:
	DROP;
	SRC;
	Fragments;
	LinkDown;
	64bytes;
	LessFromThisDate;
	MoreFromThisDate;
	DeviceModel;
	DeviceSoftware;
	SerialNumber.
Следует отметить, что для полей ввода даты предусмотрен DatePicker – удобный формат ввода требуемой даты.
На панели результатов поиска выводится список устройств, найденных по заданным параметрам.
Диалог со списком устройств – вывод краткой информации о каждой группе устройств, группировка производится по моделям устройств.
Для каждого устройства в диалоге возможно открытие формы выбора логов для просмотра – выбирается дата, время найденных логов, и в списке можно выбрать нужные логи, также можно перейти на страницу Daily Info.
Страница просмотра логов выводит детальную информацию о конкретном устройстве в определённый момент времени – сугубо технические данные узкой специализированной направленности.
Страница поиска отчётов позволяет искать отчёты по датам, выводя список всех отчётов в заданный день с указанием времени, устройства и другой технической информации. Также страница содержит несколько панелей для упрощения процедуры поиска и вывода полученной информации.
Панель отчётов текущей даты автоматически производит поиск по отчётам на текущий день и выводит результат при открытии страницы.
Панель поиска отчётов по дате позволяет изменить текущую дату на произвольную для поиска отчётов.
Результаты поиска выводятся на панели поиска, с помощью которой можно выбрать необходимый отчёт формата Daily Info.
Daily Info – набор технических узкоспециализированных данных, которые необходимы для корректной диагностики сети. Данные выводятся в удобном для пользователя формате.
Спроектированное дерево форм не является точной инструкцией по реализации графического интерфейса. WEB-разработчик имеет право внесения корректировок в карту приложения (дерево форм), однако требуется предварительная консультация с дизайнером проекта. Как показывает практика, многие существенные правки вносятся в процессе создания HTML-каркаса пользовательского интерфейса.
4.1.2	Разработка прототипа пользовательского интерфейса
Для разработки выбрана тёмная цветовая палитра, которую можно назвать «тёмная тема». Выбор тёмных оттенков обуславливается экономией электроэнергии на пользовательских мониторах, если матрица дисплея имеет распределённую подсветку и каждый пиксель подсвечивается отдельно. Также отсутствие ярких белых крупных элементов позволяет существенно снизить нагрузку на глаза пользователя, что позволяет избежать переутомления глазных мышц, сухости и прочего дискомфорта при просмотре содержимого страниц приложения. Так как в разработке WEB-интерфейса файлы стилей .CSS являются подключаемыми, в дальнейшем возможна реализация возможности переключения между светлыми и тёмными темами непосредственно во время пользования данным приложением.
Цветовая палитра фонов элементов интерфейса будет представлять градации серого цвета в тёмных его оттенках, а палитра границ и форм объектов – градации более светлых тонов серого цвета. Для максимальной читабельности текст будет белым. В целях придания уникальности данному цветовому решению выбран акцентный цвет #0087a9. При необходимости увеличения информативности пользовательского интерфейса могут понадобиться другие цвета, отличные от градаций серого, в таком случае вывод набора новых цветов должен основываться на указанном основном акцентном цвете программного решения.
Так как основной библиотекой компонентов графического интерфейса в данном проекте является Angular Material, то и прототип интерфейса, и сам интерфейс будут в стиле Material Design. Основные преимущества стилистики:
	user-friendly интерфейс – интуитивно понятный внешний вид;
	достаточная информативность иконок при умеренной лаконичности – большинство действий достаточно описать иконками без использования текстовых подсказок и прочее.
Прототипы (макеты, эскизы) пользовательского интерфейса, представленные далее, не являются точными инструкциями к разработке. Прототипы позволяют представить примерное расположение элементов на странице, их группировку и зависимости, однако при непосредственно разработке WEB-интерфейса, создании его каркаса, стилей, а также изменение UX/UI после завершённого прототипирования допускается внесение корректировок в уже законченные прототипы. Другими словами, WEB-разработчик имеет право вносить правки в UX/UI при условии проведения консультаций с дизайнером, при этом сами прототипы могут оставаться без изменений.
Так как разработка интерфейса производится с уже существующим API, формат данных, их тип и структура предопределены, поэтому некоторые элементы и формы интерфейса будут проектироваться и корректироваться на стадии разработки, непосредственно в момент расширения функционала, появления необходимости отрисовки полученных данных, а также точного понимания, какие именно данные нужно отображать. 
Далее представлены разработанные прототипы пользовательского интерфейса, а именно страниц приложения. Разработка концепта базируется в первую очередь на главных правилах построения графического дизайна и «поведении пользователя». Также разработка макетов велась с целью исключения недостатков и взятия в оборот достоинств, выявленных при системном анализе предметной области и обзоре конкурентов на мировом рынке. 
На рисунке 4.2 изображён эскиз страницы авторизации. С точки зрения эргономичности UX/UI решено не перегружать пользовательский интерфейс информацией. При открытии приложения перед оператором находятся два текстовых поля и две кнопки. Текстовые поля предназначены для ввода логина и пароля, а кнопки для скрытия/раскрытия пароля и авторизации.
 
Рисунок 4.2 – Эскиз страницы авторизации
Макет страницы поиска представлен на рисунке 4.3. На панели инструментов верхней части экрана появляются кнопки в правой части, а логотип переезжает в левую часть. В теле страницы расположены две карточки: поиск по двум основным параметрам (IP и MAC адреса) и фильтры для этих видов поиска. Кнопки поиска имеются в каждом поле поиска, чтобы разделить виды поиска между собой.
 
Рисунок 4.3 – Макет страницы поиска устройств
Производить выдачу результатов поисковых запросов пользователя предлагается в формате таблиц, где каждый столбец будет соответствовать определённому параметру, а каждая строчка (за исключением заголовочной) – соответствовать конкретному устройству. Также на каждой строчке предлагается отрисовывать кнопку для открытия детальной информации для каждого устройства. Прототип страницы выдачи результатов поиска представлен на рисунке 4.4:
 
Рисунок 4.4 – Прототип таблицы с результатами поиска
4.2	Организация взаимодействия с сервером
Для решения поставленной задачи, отладки запросов и проверки работоспособности ПО принято решение использовать SLA-сервер по адресу http://mysla.dlink.ru. Тестирование работоспособности будет проводиться с помощью отладочной учетной записи. Разрабатываемый WEB-интерфейс может взаимодействовать с HTTP API, доступным онлайн по адресу http://mysla.dlink.ru:8090.
Следует отметить, что в связи с особенностями политики CORS сервер запрещает подключение к нему с других доменов, вследствие чего было принято решение использовать proxy-сервер для добавления заголовков «Access-Control-Allow-Origin» в каждый запрос. Прокси-сервер работает таким образом, что принимает запрос от пользователей и перенаправляет их на указанный сервер, и полученные данные от сервера перенаправляет обратно пользователю. Исходные коды сервера можно найти в репозитории проекта [9]. Развёртка сервера была произведена на хостинг для разработчиков Heroku [10], вследствие чего доступ к этому proxy может быть осуществлён с любого устройства, подключенного к сети Internet [11].
Аутентификация осуществляется с помощью вызова метода POST /login c полезной нагрузкой {username: username, password: md5.createHash(password)}, который возвращает объект с полями:
•	token - токен доступа;
•	permission - права доступа;
•	user - имя пользователя.
Поле token сохраняется и прикрепляется к каждому последующему запросу в заголовке запроса «Token».
В Приложении Б представлены некоторые методы, доступные для вызова на вышеуказанном тестовом API.
4.3	Описание технологии разработки клиентской части веб-приложений с использованием фреймворка «Angular»
Angular – фреймворк, написанный на TypeScript, или платформа, созданная для разработки одностраничных web-приложений с использованием таких языков, как TypeScript и HTML. Фреймворк реализует различные функции в виде набора TypeScript библиотек.
Архитектура приложения, построенного на Angular опирается на некоторые фундаментальные концепции. Основоположными блоками для "стройки" можно назвать NgModules (модули Angular), которые предоставляют контекст компиляции для компонентов. Модули Angular собирают связанный код в функциональные наборы; Angular-разработка определяется набором модулей. В разработке всегда имеется по крайней мере корневой модуль.
NgModule определяется классом с декоратором @NgModule(). Декоратор @NgModule() – это функция, которая принимает один объект метаданных, свойства которого описывают модуль. Далее представлены свойства, которые можно назвать наиболее важными:
	declarations: компоненты, директивы и пайпы, которые принадлежат этому NgModule;
	exports: подмножество объявлений, которые должны быть видны и использоваться в шаблонах компонентов других NgModules;
	imports: другие модули, чьи экспортированные классы необходимы шаблонам компонентов, объявленным в этом NgModule;
	providers: создатели сервисов, которые этот NgModule вносит в глобальный набор сервисов; они становятся доступными во всех частях приложения;
	bootstrap: основное представление приложения, называемое корневым компонентом, в котором размещены все остальные представления приложения. Только корневой NgModule должен устанавливать свойство bootstrap.
Компонент контролирует участок экрана, называемый представлением. Внутри класса компонента определяется его логика – что он делает для поддержки представления. Класс взаимодействует с представлением через API свойств и методов. Вид компонента определяется его сопутствующим шаблоном. Шаблон – это форма HTML, которая сообщает Angular, как визуализировать компонент. Иерархия представлений может включать представления от компонентов в одном и том же NgModule, но она также может включать представления от компонентов, определенных в разных NgModule.
Сервис – это широкая категория, охватывающая любое значение, функцию или особенность, которая нужна приложению. Сервис обычно является классом с узконаправленной, четко определенной целью. Его задача - выполнять что-то определённое, конкретное. Фреймворк отличает компоненты от сервисов для повышения модульности и возможности повторного использования. Дело в том, что работа каждого компонента заключается в том, чтобы обеспечить взаимодействие с front-end и ничего более. Компонент должен представлять свойства и методы для привязки данных, чтобы быть посредником между представлением (отображаемым шаблоном) и логикой приложения (которая часто включает в себя некоторое представление о модели).
В данном разделе были описаны основные принципы работы с фреймворком Angular и его основные части.
4.4	Разработка пользовательского интерфейса
Тестовый сервер принимает и отправляет данные в формате JSON. Преимущество HTTP API – передача данных в удобном для восприятия человеком виде, а также удобном для пост-обработки этих данных для их последующего использования.
Основная задача разрабатываемого ПО – сбор введённых пользователем данных, обработка в JSON, отправка на сервер, получение с сервера JSON, повторная обработка для отображения пользователю.
Для ускорения процесса разработки и улучшения usability пользовательского интерфейса во всём проекте использована библиотека Angular Material. Для соблюдения выбранного цветового решения было принято решение заменить в одной из prebuilt-themes акцентные цвета на собственный цвет и корректировать стили конкретных элементов под свои нужды.
Исходные коды всех разработанных элементов приведены в Приложении А.
Ссылка на репозиторий проекта на GitHub, или архив с последним успешным билдом могут быть предоставлены по требованию.
4.4.1	Корневой модуль приложения
Так как разработка является демонстрационной, весь код приложения размещён в одном корневом модуле. Функционал пользовательского интерфейса разделён на несколько логических блоков и распределён по компонентам и сервисам.
4.4.2	Компонент «Корневой»
Данный компонент несёт в себе невидимый для пользователя функционал, так как главное предназначение компонента – хранение констант, необходимых для корректной работы приложения и создание HTML-каркаса, который предопределяет расположение всех остальных дочерних компонентов на экране пользователя и передачу в них значений констант, хранящихся в корневом компоненте.
Корневой компонент не имеет вычислений в коде или сложной логики, его основная задача – хранение и передача другим компонентам значений констант, передача, получение и хранение значений переменных, а также скрытие/показ других дочерних компонентов.
4.4.3	Компонент «Панель инструментов»
Панель инструментов – полоска акцентного цвета в верхней части экрана, которая обычно содержит логотип и несколько кнопок для быстрого доступа к основным разделам приложения.
Toolbar имеет динамический набор возможностей взаимодействия – элементы, кнопки и список возможных действий изменяется в зависимости от страницы, на которой находится пользователь. В начале работы с приложением, на странице авторизации, панель не содержит кнопок, только логотип провайдера системы SLA мониторинга, расположенный по центру экрана (рисунок 4.5):
 
Рисунок 4.5 – Toolbar на странице авторизации
Сразу после успешной авторизации логотип на панели инструментов смещается в левый край, а в правой части панели появляются кнопки. Эти кнопки отвечают за переход между двумя основными режимами работы приложения – поиск по устройствам и по датам, а также присутствует кнопка выхода из системы (рисунок 4.6). Все 3 кнопки оснащены интерактивными подсказками – при наведении курсора мыши всплывает сообщение с описанием действия, принадлежащего кнопке (рисунок 4.7):
 
Рисунок 4.6 – Toolbar после успешной авторизации пользователя
 
Рисунок 4.7 – Всплывающая подсказка
Визуальное поведение рассматриваемого компонента рассмотрено, далее приведено описание логики.
Компонент панели инструментов получает от корневого компонента значение переменной, которая сигнализирует об успешной авторизации, и когда значение переменной становится истинным, форма логина закрывается и открывается главная страница (страница поиска), и вместе с этим на панели инструментов логотип смещается в левый край, а с правого появляются кнопки.
4.4.4	Компонент «Подвал»
Данный компонент имеет единственное предназначение – отрисовку Footer, или подвала. Footer – сектор, или блок с информацией, который находится внизу экрана. Обычно он прикреплён или к нижней границе окна, либо к последнему (самому нижнему) элементу на странице. 
Чаще всего в «подвале» размещают контактную информацию, настройки языковой локали приложения и прочие параметры, которые должны быть на каждой странице, но не акцентировать на себе слишком много внимания и не быть первым объектом, на который обращает внимание пользователь.
В данной разработке в процессе системного анализа предметной области и проектирования пользовательского интерфейса не было выявлено информации, которая должна присутствовать на каждой странице, но при этом обращаться на себя внимание в последнюю очередь. Однако создание Footer является перспективным вкладом в будущее проекта – при появлении информации для этого блока останется только вставить её в раздел. Чтобы не оставлять Footer пустым, в него были помещены контакты разработчика и логотип, информирующий о способе связи с ним. Данная информация не несёт в себе никакой смысловой нагрузки и носит сугубо демонстрационный характер, дабы проиллюстрировать пользователю работоспособность и возможный функционал. Разработанный Footer проиллюстрирован на рисунке 4.8:
 
Рисунок 4.8 – Footer на странице авторизации
4.4.5	Компонент «Авторизация»
Данный компонент предназначен для работы с процедурой авторизации. Присутствует форма с двумя полями ввода текста – логин и пароль – и сама кнопка «Login» для осуществления процедуры входа. Внешний вид разработанного компонента на странице авторизации (в масштабе для повышения читабельности) представлен на рисунке 4.9:
 
Рисунок 4.9 – Компонент «форма авторизации»
При помощи компонентов библиотеки Angular Material каждое поле содержит название, которое смещается из центра поля при попытке ввода текста (рисунок 4.10), кнопкой скрытия логина (рисунок 4.11) и анимацией процесса авторизации (рисунок 4.12), при котором нажатая кнопка начала процесса авторизации пропадает:
 
Рисунок 4.10 – Смещение названия поля при заполнении
 
Рисунок 4.11 – Кнопка отображения пароля
 
Рисунок 4.12 – Процесс авторизации
В плане выполняемого кода компонент авторизации выполняет следующие действия: 
	принимает через поля логин и пароль;
	генерирует md5 hash пароля;
	отправляет на сервер запрос на авторизацию;
	рассматривает полученный ответ от сервера и в случае получения токена авторизации передаёт в главный компонент текущий токен авторизации и логин пользователя.
4.4.6	Компонент «Основная информация»
Компонент находится в верху страницы поиска по устройствам, представляет собой панель расширения и выводит основную информацию о системе (рисунок 4.13):
	логин текущего пользователя;
	количество отчётов за последний час;
	общее количество устройств в системе.
 
Рисунок 4.13 – Вывод краткой информационной сводки
Текущий логин предоставляет компонент авторизации, а значения для остальных двух строк запрашиваются с сервера и отображаются в случае успешного их получения.
4.4.7	Компонент «Поиск»
Визуальная часть состоит из трёх составляющих панелей расширения: 
	поиск по IP и MAC;
	указание фильтров поиска;
	результаты поиска.
Каждое поле этого компонента имеет смещаемый заголовок во время ввода данных. Все поля, требующих определённого формата данных, имеют placeholder с подсказками.
По умолчанию панель с результатами скрыта и отображается только в случае наличия результатов поиска. Вид компонента поиска по умолчанию представлен на рисунке 4.14:
 
Рисунок 4.14 – Компонент поиска. Вид по умолчанию
Каждое из двух полей обладает подсказками для формата вводимых данных. Подсказки появляются при установке курсора в поле (рисунок 4.15):
 
Рисунок 4.15 – Подсказки формата данных для ввода
Предусмотрено две кнопки поиска, чтобы разграничивать поиск по IP и поиск по MAC. Присутствует анимация загрузки на каждой кнопке для упрощённого восприятия процесса пользователем (рисунок 4.16):
 
Рисунок 4.16 – Анимация процесса поиска
По умолчанию панель с фильтрами скрыта. Внешний вид развёрнутой панели представлен на рисунке 4.17:
 
Рисунок 4.17 – Панель фильтров поиска
В полях с вводом даты реализован DatePicker в полноэкранном режиме (touch UI), позволяющий пользователю быстро выбрать дату. Перед пользователем появляется интерактивное окно выбора даты, при этом сама страница остаётся на фоне и затемняется (рисунок 4.18, без масштабирования элементов интерфейса):
 
Рисунок 4.18 – Полноэкранное всплывающее окно выбора даты
В случае успешного поиска появляется панель с результатами поиска снизу панели фильтров, в случае неуспешного – сообщение об ошибке (либо средствами браузера, либо форматом уведомления в нижней части страницы), более подробно получение сообщений описано в пункте 5.2.5. Внешний вид панели с результатами поиска представлен на рисунке 4.19:
 
Рисунок 4.19 – Панель с результатами поиска
Описание каждого элемента данной панели представлено в пункте 5.2.4 настоящей работы.
Компонент поиска принимает от главного компонента текущий токен. Принимая данные из полей ввода, формирует запрос на поиск и отправляет на сервер, прикрепляя токен. Далее обрабатывает полученные с сервера данные и выводит в удобном для пользователя виде:
	список полученных результатов делится на группы, названием которых становится модель устройства;
	в середине заголовка панели выводится общее количество найденных устройств и количество групп;
	в первом столбце таблицы выводится наименование группы (название модели);
	в заголовке второго столбца таблицы указан тип поиска;
	кнопка во втором столбце таблицы открывает диалог с более детальной информацией, на кнопке указано количество устройств в группе.
Кнопки, реализованные в панели с результатами, открывают компонент «Диалог с результатами» и передают ему необходимые для отображения данные через сервис «Общий».
4.4.8	Компонент «Диалог с результатами»
Данный компонент вызывается и открывается в качестве диалога (рисунок 4.20). Принимая необходимый набор данных через сервис «Общий», происходит обработка данных для их отображения.
 
Рисунок 4.20 – Диалог с результатами поиска, фильтрация по модели
Диалог открывается аналогично DatePicker, затемняя основное окно на фоне и занимает максимальный объём свободного пространства в окне браузера (рисунок 4.21):
 
Рисунок 4.21 – Расположение диалога относительно окна браузера
Основная информация в данном диалоге:
	в заголовке отображается название модели;
	в заголовке первого столбца – тип идентификатора;
	столбцы со второго по шестой содержат техническую информацию, фильтрация которой осуществляется с помощью панели фильтров в компоненте поиска. Информация в этих столбцах обработана и представлена в удобном для восприятия человеком формате;
	в последнем столбце расположены кнопки(кнопка) взаимодействия. По умолчанию это кнопка открытия логов конкретного устройства.
4.4.9	Сервис «Общий»
С помощью сервиса компоненты обмениваются данными, а именно имеют «общие» переменные, изменения значений которых влекут за собой изменения значений переменных в других компонентах. 
Данный сервис позволяет обмениваться компонентам информацией, необходимой для корректного отображения диалога с результатами и фильтрацией по группам (моделям) устройств.
4.4.10	Реализация мобильной версии
Для того, чтобы систему можно было использовать на мобильных устройствах, во время верстки страниц приложения применялась техника адаптивной верстки – дизайн, который подстраивается (адаптируется) под размер окна, в том числе может происходить перестройка блоков с одного места на другое, или их замена блоками, отображаемыми только при определенном разрешении. Адаптивная верстка пришла на смену идеи создания специальных мобильных версий сайта, «живущих» на отдельных поддоменах. Так, например, поля для ввода IP и MAC, которые в основной версии расположены в ряд, в мобильной версии располагаются в столбец, а панели на странице поиска растягиваются на всю ширину экрана. Пример страниц мобильной версии изображен на рисунке 4.22:
     
Рисунок 4.22 - – Скриншоты некоторых страниц в мобильной версии системы
В данном разделе была описана реализация программной системы, приведены скриншоты пользовательского интерфейса, описаны механизмы работы с основными страницами веб-приложения.
 
5	Разработка программной документации
5.1	Руководство системного программиста
5.1.1	Общие сведения о программе
Так как ПО необходима JavaScript runtime, в качестве которой выступает Node.js, скомпилированную версию проекта необходимо размещать на сервере, или хостинге, которым может являться либо localhost, либо домен в мировой сети.
Приложение разработано с использованием таких языков, как TypeScript, HTML, CSS. Для создания приложения использовался Visual Studio Code с набором необходимых инструментов для разработки и утилитой командной строки Angular CLI.
5.1.2	Структура программы
Все файлы, находящиеся в папке с результатом компиляции, необходимы для корректной работы приложения. Приложение взаимодействует с Back End посредством HTTP-запросов. 
Перед тем как скомпилировать проект в первый раз, необходимо выполнить консольную команду «npm install» для того, чтобы установить зависимости проекта.
Список зависимостей проекта указаны в package.json в корневой директории исходных кодов проекта.
5.1.3	Настройка программы
Программа не требует дополнительной настройки.
В случае, если адрес HTTP сервера или его API будет изменён, ПО требуется скомпилировать и произвести развёртывание заново, предварительно сменив значения констант в исходных кодах программы.
5.1.4	Проверка программы
Запуск программы можно считать успешным, если при открытии приложения отображается форма ввода логина и пароля.
В ходе тестирования была подтверждена корректная работа программы.
5.1.5	Дополнительные возможности программы
Помимо функций, указанных в техническом задании, WEB-интерфейс имеет адаптивную вёрстку, при которой контент на просматриваемой странице автоматически адаптируется под параметры окна, вследствие чего повышается usability, пропадает необходимость перезагрузки страниц приложения при смене размеров окна и, самое главное, UI не будет иметь двух версий – для десктопных браузеров и для телефонов.
5.1.6	Сообщения системному программисту
В программе не предусмотрены сообщения системному программисту.
5.2	Руководство пользователя
5.2.1	Назначение и условия применения программы
Программа предназначена для SLA мониторинга оборудования в обслуживаемой сети устройств, для просмотра статистики о каждом устройстве, детальной информации и отчётов в разрезе времени.
Рассматривая функционал более детально, ПО создано для поиска систематизированных статистических данных на SLA сервере, их обработки и удобного отображения, а также для формирования и отправки на сервер запросов на поиск данных.
Также о назначении программы и о её функционале было упомянуто в пунктах 2.2 и 2.3.
Для запуска приложения подойдет любой современный веб-браузер, например: Chrome 83, IE 11 или Edge 44, минимальные системные требования приложения будут соответствовать минимальным системным требованиям браузера. При открытии главной страницы системы объём загруженных скриптов приблизительно равен 1 Мб. Полный размер приложения при загрузке всех модулей приблизительно составляет 3 Мб. При первой загрузке какого-либо компонента приложения он кэшируется в браузере и дальнейшее обращение к этому компоненту загружает минимальное количество данных с сервера.
5.2.2	Обращение к программе для запуска
Для того чтобы начать работу с системой, необходимо открыть веб-браузер и перейти по адресу, выделенному системе. 
Если ПО было запущено на локальном ПК командой «npm start» или «ng serve», то стандартный адрес обращения к программе - http://localhost:4200/.
Если ПО развёрнуто не на текущем локальном ПК, то необходимо перейти либо по выданному системным администратором адресу, либо по адресу, указанному в параметрах «npm start» или «ng serve».
5.2.3	Входные и выходные данные
В качестве входных данных используются:
	данные авторизации (логин и пароль);
	основные данные для поиска устройств (IP и MAC);
	многочисленные фильтры для поиска устройств;
	данные для поиска отчётов, такие как дата, время и идентификаторы устройств.
Выходные данные:
	таблицы с информацией;
	списки устройств;
	графики с техническими данными;
	информация об устройствах;
	отчёты.
5.2.4	Работа с программой
Некоторые приведённые в данном пункте скриншоты, изображения, рисунки и примеры были подвергнуты масштабированию ввиду повышения читабельности настоящей пояснительной записки к данной работе, так как минимальное разрешение монитора, при котором использование ПО считается комфортабельным, превышает ширину печатной строки листа А4, на котором должен уместиться скриншот. Более того, благодаря адаптивной вёрстке web-приложения оператор имеет возможность менять размеры окна web-браузера в разумных пределах, а также менять разрешение экрана без потери функциональности. Более подробно про адаптивную вёрстку изложено в пункте 4.4.10 настоящей работы.
Если пользователь открывает приложение в первый раз или его токен авторизации невалидный (отсутствует или истек срок действия), то он попадает на страницу авторизации (рисунок 5.1).
 
Рисунок 5.1 – Страница авторизации
Для продолжения работы с системой пользователю необходимо ввести логин и пароль в соответствующие поля ввода, затем нажать кнопку входа «Login». В целях удостоверения корректного введения логина имеется кнопка отмены скрытия вводимых данных в поле ввода пароля. Если авторизация прошла успешно, то пользователь будет перенаправлен на главную страницу, которой является страница поиска. Большинство кнопок системы, изображенных в виде иконок, имеет подсказки, посмотреть которые можно наведя курсор мыши на соответствующую кнопку. Более подробно о подсказках изложено в пункте 5.2.5, а пример всплывающей подсказки приведён на рисунке 4.7 настоящей работы.
После успешной авторизации пользователя форма авторизации пропадает, а в правой части экрана появляются три кнопки (рисунок 5.2):
 
Рисунок 5.2 – Страница поиска, открывающаяся после успешной регистрации
Представленные на рисунке 5.2 кнопки отвечают за три основных действия, которые должны быть всегда в зоне видимости и быстрого доступа для авторизованного пользователя (слева направо):
	кнопка перехода на страницу поиска по устройствам, она же главная страница. Кнопка становится доступной для нажатия только при нахождении на странице, отличной от страницы поиска по устройствам;
	кнопка открытия поиска отчётов по датам. Становится доступной при нахождении на любой другой странице;
	кнопка выхода из системы. Возвращает пользователя на страницу авторизации.
Все три кнопки имеют всплывающие подсказки при наведении курсора, пример такой подсказки представлен на рисунке 4.7 настоящей работы.
В теле главной страницы представлены панели расширения. Некоторые из них открыты по умолчанию (рисунок 5.2), а некоторые появляются только после выполнения определённых действий. Каждую панель можно свернуть, или развернуть для удобства группировки информации на экране. Свернуть/развернуть панель можно нажатием на заголовок панели.
Первая панель расширения – «General info», или же «Основная информация» (рисунок 5.3). В теле панели представлена краткая сводка:
	текущий логин пользователя;
	количество отчётов за последний час (отсчитывается с момента загрузки страницы);
	общее количество устройств в системе.
 
Рисунок 5.3 - Панель расширения «General info»
Сразу после панели со сводкой основной информации идёт панель поиска устройств по IP или MAC. Так как это два разных вида поиска, предусмотрено две кнопки (по одной в каждом поле) для осуществления каждого вида поиска отдельно.
 
Рисунок 5.4 – Панель поиска по IP или MAC
В случае, если требуется указать дополнительные параметры поиска, пользователь может указать необходимые фильтры. По умолчанию панель с фильтрами свёрнута (рисунок 5.5) и разворачивается с помощью нажатия на заголовок панели (рисунок 5.6):
 
Рисунок 5.5 – Свёрнутая панель фильтров поиска
 
Рисунок 5.6 – Панель фильтров поиска
Чтобы быстро ввести необходимую дату в последние два поля, имеется кнопка с иконкой календаря, позволяющая открыть интерактивный календарь. (рисунок 5.7):
 
Рисунок 5.7 – Полноэкранный инструмент выбора даты.
После ввода всех параметров поиска следует нажать на кнопку поиска и дождаться окончания загрузки. Если результат поиска оказался нулевым, система уведомит оператора с помощью сообщений (уведомлений). Более подробно получение сообщений описано в пункте 5.2.5. Если результат поиска ненулевой, на экране появляется панель с результатами поиска, представленная на рисунке 5.8:
 
Рисунок 5.8 – Панель с результатами поиска
Основная информация на панели (рисунок 5.9):
1.	Количество найденных устройств;
2.	Количество наименований различных моделей в найденных устройствах;
3.	Название текущей модели групп устройств, 1 строчка = 1 модель;
4.	Тип поиска (IP или MAC);
5.	Кнопка открытия таблицы с результатами, на которой указано количество устройств.
 
Рисунок 5.9 – Схема расположения данных на панели с результатами поиска
После нажатия на кнопку открытия таблицы на экране пользователя открывается в полный экран таблица с результатами поиска для конкретной модели устройств (рисунок 5.10):
 
Рисунок 5.10 – Полноэкранный режим просмотра полученной информации
Описание информации в таблице (рисунок 5.11):
1.	Наименование группы устройств (по модели);
2.	Тип идентификатора (IP или MAC) и сам идентификатор;
3.	64bytes (максимальное значение / дата);
4.	CRC (максимальное значение / дата);
5.	DROP (максимальное значение / дата);
6.	Fragments (максимальное значение / дата);
7.	Link down (максимальное значение / дата);
8.	Столбец с кнопками взаимодействия с устройством (например, просмотр логов);
9.	Кнопка закрытия окна просмотра.
 
Рисунок 5.11 – Схема расположения данных в окне с результатами
Следуемые далее окна выбора даты логов и страницы с логами не нуждаются в дополнительном описании, так как интерфейс этих разделов является интуитивно понятным и аналогичен описанному ранее. 
Предполагается, что целевой пользователь данного ПО будет достаточно глубоко погружён в предметную область SLA мониторинга. Без предварительного знакомства с основными терминами, параметрами поиска, характеристиками устройств и внутренними принципами работы SLA сервисов пользование данным ПО не предоставляется возможным. Целевой оператор должен обладать определённым набором знаний в конкретной предметной области для обращения с ПО, в противном случае результат взаимодействия с программным обеспечением будет нулевым.
5.2.5	Сообщения оператору
В процессе работы с системой оператор, или, другими словами, пользователь может получать два типа сообщений: уведомления и подтверждение действия.
Так как ПО отправляет данные на сервер всего один раз – во время авторизации, а всё остальное время получает данные с сервера, подтверждения действий не требуются при выполняемых операциях, так как не оставляют изменений на сервере. Подтверждение может требоваться в ситуациях, которые требуют особого внимания – например, подтверждение при выходе из системы (рисунок 5.12)
 
Рисунок 5.12 – Подтверждение выхода из системы.
В системе предусмотрены уведомления пользователя о результатах поиска, при которых нет совпадений указанных фильтров с данными на сервере. Другими словами, «По вашему запросу ничего не найдено» (рисунок 5.13):
 
Рисунок 5.13 – Пример уведомления о нулевых результатах поиска
Пользователь может скрыть уведомление самостоятельно, либо оно будет скрыто автоматически через короткое время.
В некоторых версиях ПО сообщения пользователю реализованы стандартными средствами браузера. Визуальное оформление может отличаться, но текст будет одинаков в окнах сообщения любого браузера. На рисунке 5.14 представлен пример такого сообщения оператору в браузере Google Chrome с использованием тёмной темы:
 
Рисунок 5.14 – Сообщения пользователю стандартными средствами браузера
Ещё один вид взаимодействия с пользователем, который можно отнести к сообщениям оператору – подсказки при наведении на определённые объекты WEB-интерфейса. Пример таких всплывающих подсказок приведён на рисунке 4.7 настоящей работы.
 
6	Тестирование программного обеспечения
Одним из ключевых этапов в разработки любого программного обеспечения является его тестирование – процесс исследования, испытания программного продукта, имеющий своей целью проверку соответствия между реальным поведением программы и ее ожидаемым поведением на конечном наборе тестов, выбранных определенным образом.
Тестирование ПО будет осуществляться с помощью сценариев тестирования (Test Case) – минимальной единицы тестирования, которая состоит из набора необходимых в реализации шагов, ожидаемого результата и его соответствия полученному. Необходимо исследовать поведение программы в зависимости от данных, поступающих на её входы и действий, совершаемых пользователем. Подробное описание каждого Test Case и результат прохождения описан в таблице 1:
Таблица 1 – Сценарии тестирования
Номер	Описание	Сценарий	Ожидаемый результат	Статус
1	Проверка открытия главной страницы после успешной авторизации.	1. Запустить браузер в режиме «инкогнито». 
2. Перейти по адресу приложения. 
3. В форму авторизации ввести пару логин-пароль существующего пользователя. 
4. Нажать кнопку «Войти».	Открытие главной страницы	Успешно
 
Продолжение таблицы 1
Номер	Описание	Сценарий	Ожидаемый результат	Статус
2	Проверка повторного входа в систему после выхода из системы 	1. Запустить браузер в режиме «инкогнито». 
2. Перейти по адресу приложения. 
3. В форму авторизации ввести пару логин-пароль существующего пользователя. 
4. Нажать кнопку «Войти».
5. Дождаться загрузки главной страницы.
6. Нажать кнопку «Выйти»
7. Повторить пункты 3,4	Открытие главной страницы	Успешно
3	Проверка сворачивания панели расширения	1. Запустить браузер в режиме «инкогнито». 
2. Перейти по адресу приложения. 
3. В форму авторизации ввести пару логин-пароль существующего пользователя. 
4. Нажать кнопку «Войти».
5. Дождаться загрузки главной страницы.
6. Нажать на заголовок любой представленной на странице панели.	Выбранная панель сворачивается	Успешно
 
Продолжение таблицы 1
Номер	Описание	Сценарий	Ожидаемый результат	Статус
4	Проверка корректного отображения информации на панели «General info»	1. Запустить браузер в режиме «инкогнито». 
2. Перейти по адресу приложения. 
3. В форму авторизации ввести пару логин-пароль существующего пользователя. 
4. Нажать кнопку «Войти».
5. Дождаться загрузки главной страницы.	Во втором столбце таблицы будут отображаться ненулевые значения, полученные с сервера	Успешно
5	Проверка успешного поиска устройств	1. Запустить браузер в режиме «инкогнито». 
2. Перейти по адресу приложения. 
3. В форму авторизации ввести пару логин-пароль существующего пользователя. 
4. Нажать кнопку «Войти».
5. Дождаться загрузки главной страницы.
6. Ввести в поле IP или MAC значение существующих идентификаторов устройств
7. Нажать на кнопку поиска в этом же поле	Снизу от панели фильтров появляется панель с результатами поиска по устройствам	Успешно
 
Продолжение таблицы 1
Номер	Описание	Сценарий	Ожидаемый результат	Статус
6	Проверка отсутствия результатов поиска	1. Запустить браузер в режиме «инкогнито». 
2. Перейти по адресу приложения. 
3. В форму авторизации ввести пару логин-пароль существующего пользователя. 
4. Нажать кнопку «Войти».
5. Дождаться загрузки главной страницы.
6. Ввести в поле IP или MAC значение несуществующих идентификаторов устройств.
7. Нажать на кнопку поиска в этом же поле.	Панель с результатами поиска пропадёт (если отображалась до этого), появится сообщение об ошибке	Успешно

Протестировав разработанную систему, можно сделать вывод о ее работоспособности и о корректном выполнении предъявленных требований к системе.
 
ЗАКЛЮЧЕНИЕ
Сетевые технологии – важная сфера деятельности, которую можно назвать жизненно необходимой в условиях современного мира. Практически ни одна компания не обходится без пользования сетью Internet, телефонных звонков, систем видеонаблюдения и прочего, а ведь работоспособность этих сложных систем поддерживается сетевыми администраторами и сетевиками – людьми, ответственными за бесперебойное функционирование всех систем коммуникаций.
В ходе данной работы были рассмотрены основные проблемы, присущие этой области, исследованы варианты их решения от ведущих мировых компаний. Анализ предметной области позволил выявить существенные недостатки, основные преимущества и сформировать требования к разработанному ПО. Стек выбранных технологий позволил сократить временные и ресурсные затраты на осуществление разработки, при этом позволяя ей оставаться актуальной. 
Полученное на выходе web-приложение полностью удовлетворяет всем потребностям пользователя, на которого ориентирована разработка, решает все поставленные задачи и является актуальным современным программным средством.
В ходе тестирования были доказаны:
	работоспособность;
	достоверность;
	отказоустойчивость;
	адаптивность;
	кросплатформенность.
